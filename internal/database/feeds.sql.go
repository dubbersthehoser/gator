// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds(
	id,
	created_at,
	updated_at,
	url,
	name,
	user_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, url, name, user_id
`

type CreateFeedParams struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Url       string
	Name      string
	UserID    string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Url,
		arg.Name,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const deleteAllFeeds = `-- name: DeleteAllFeeds :exec
DELETE FROM feeds
`

func (q *Queries) DeleteAllFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeeds)
	return err
}

const getAllFeeds = `-- name: GetAllFeeds :many
SELECT id, created_at, updated_at, url, name, user_id FROM feeds
`

func (q *Queries) GetAllFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeed = `-- name: GetFeed :one
SELECT id, created_at, updated_at, url, name, user_id FROM feeds WHERE name = $1
`

func (q *Queries) GetFeed(ctx context.Context, name string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, name)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const getFeedCount = `-- name: GetFeedCount :one
SELECT count(*) FROM feeds
`

func (q *Queries) GetFeedCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFeedCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFeedsByName = `-- name: GetFeedsByName :many
SELECT f.name, f.url 
FROM feeds f 
INNER JOIN users u ON f.user_id = u.id 
WHERE u.name = $1
`

type GetFeedsByNameRow struct {
	Name string
	Url  string
}

func (q *Queries) GetFeedsByName(ctx context.Context, name string) ([]GetFeedsByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsByNameRow
	for rows.Next() {
		var i GetFeedsByNameRow
		if err := rows.Scan(&i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
